Census2016Reduced$AGE3[is.na(Census2016Reduced$AGE3)] <- Census2016Reduced$AGE[is.na(Census2016Reduced$AGE3)]
Years <- c("2016","2017","2018","2019","2021","2022")
library(dplyr)
library(lubridate)
library(stringi)
library(haven)
library(odbc)
library(DBI)
#set up working directory, input and output folders.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
RootWD <- getwd()
setwd(RootWD)
Inputs <- file.path(RootWD, "inputs")
Outputs <- file.path(RootWD, "outputs")
Year <- "2022"
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
CensusAnalysisFolder <- "//admindatacentre/ADC/Data/Analysis/CensusAnalysis"
#
# Census2022 <- read_sas(paste0(CensusAnalysisFolder, "/2022/cop2022_with_csoppsn.sas7bdat"))
# saveRDS(Census2022, file = paste0(Inputs,"/Census2022.Rds"))
Census2022 <- readRDS(paste0(Inputs,"/Census2022.Rds"))
Census2022$SA <- str_pad(Census2022$SA, 9, pad = "0")
colnames(Census2022)
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
library(stringT)
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
library(stringr)
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
Eircodes <- readRDS(paste0(Inputs,"/Eircodes2023Q2.Rds"))
colnames(Eircodes)
Census2022 <- Census2022%>%select(prn_pik,building_id_pik,hrn_2022_pik,ur_eircode_pik)
SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby.csv"))
SAHRLookup$SA <- str_pad(SAHRLookup$SA, 9, pad = "0")
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "sa_pub2022",by.y = "SA", all.x = T)
#
# Census2022 <- read_sas(paste0(CensusAnalysisFolder, "/2022/cop2022_with_csoppsn.sas7bdat"))
# saveRDS(Census2022, file = paste0(Inputs,"/Census2022.Rds"))
Census2022 <- readRDS(paste0(Inputs,"/Census2022.Rds"))
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
Census2022 <- Census2022%>%select(sa_pub2022.prn_pik,building_id_pik,hrn_2022_pik,ur_eircode_pik)
Census2022 <- Census2022%>%select(sa_pub2022,prn_pik,building_id_pik,hrn_2022_pik,ur_eircode_pik)
SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby.csv"))
SAHRLookup$SA <- str_pad(SAHRLookup$SA, 9, pad = "0")
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "sa_pub2022",by.y = "SA", all.x = T)
CensusWHR$Region[CensusWHR$sa_pub2022 == "26701100"] <- "HSE Dublin and South East"
CensusWHR$IHA[CensusWHR$sa_pub2022 == "26701100"] <- "HSE Dublin South and Wicklow"
CensusWHR$CHN[CensusWHR$sa_pub2022 == "26701100"] <- "Milltown, Churchtown and Dundrum"
CensusWHR[is.na(CensusWHR$Region),]
test <- CensusWHR[is.na(CensusWHR$Region),]
View(test)
unique(test$sa_pub2022)
nrow(test)
#
# Census2022 <- read_sas(paste0(CensusAnalysisFolder, "/2022/cop2022_with_csoppsn.sas7bdat"))
# saveRDS(Census2022, file = paste0(Inputs,"/Census2022.Rds"))
Census2022 <- readRDS(paste0(Inputs,"/Census2022.Rds"))
colnames(Census2022)
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
Census2022$SA_PUB2017<- str_pad(Census2022$SA_PUB2017, 9, pad = "0")
Census2022 <- Census2022%>%select(SA_PUB2017,sa_pub2022,prn_pik,building_id_pik,hrn_2022_pik,ur_eircode_pik)
Census2022$sa_pub2022 <- gsub(" ","",Census2022$sa_pub2022)
Census2022$SA_PUB2017 <- gsub(" ","",Census2022$SA_PUB2017)
Census2022$sa_pub2022 <- str_pad(Census2022$sa_pub2022, 9, pad = "0")
Census2022$SA_PUB2017<- str_pad(Census2022$SA_PUB2017, 9, pad = "0")
Census2022 <- Census2022%>%select(SA_PUB2017,sa_pub2022,prn_pik,building_id_pik,hrn_2022_pik,ur_eircode_pik)
#SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby.csv"))
SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby_old.csv"))
#SAHRLookup$SA <- str_pad(SAHRLookup$SA, 9, pad = "0")
SAHRLookup$SA_PUB2016 <- str_pad(SAHRLookup$SA_PUB2016, 9, pad = "0")
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "SA_PUB2017",by.y = "SA", all.x = T)
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "SA_PUB2017",by.y = "SA_PUB2016", all.x = T)
CensusWHR$Region[CensusWHR$SA_PUB2017 == "26701100"] <- "HSE Dublin and South East"
test <- CensusWHR[is.na(CensusWHR$Region),]
nrow(test)
nrow(Census2022)
nrow(CensusWHR)
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "SA_PUB2017",by.y = "SA_PUB2022", all.x = T)
CensusWHR$Region[CensusWHR$SA_PUB2017 == "26701100"] <- "HSE Dublin and South East"
CensusWHR$IHA[CensusWHR$SA_PUB2017 == "26701100"] <- "HSE Dublin South and Wicklow"
CensusWHR$CHN[CensusWHR$SA_PUB2017 == "26701100"] <- "Milltown, Churchtown and Dundrum"
SA_PUB2017
test <- CensusWHR[is.na(CensusWHR$Region),]
nrow(test)
SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby.csv"))
#SAHRLookup <- read.csv(paste0(Inputs,"/SA_RHALookup_FromLibby_old.csv"))
SAHRLookup$SA <- str_pad(SAHRLookup$SA, 9, pad = "0")
#SAHRLookup$SA_PUB2016 <- str_pad(SAHRLookup$SA_PUB2016, 9, pad = "0")
CensusWHR <- merge(Census2022,SAHRLookup, by.x = "sa_pub2022",by.y = "SA", all.x = T)
CensusWHR$Region[CensusWHR$sa_pub2022 == "26701100"] <- "HSE Dublin and South East"
CensusWHR$IHA[CensusWHR$sa_pub2022 == "26701100"] <- "HSE Dublin South and Wicklow"
CensusWHR$CHN[CensusWHR$sa_pub2022 == "26701100"] <- "Milltown, Churchtown and Dundrum"
#69200 missing with sa_pub2022 sa 2022 initial
# 5 mil missing with SA_PUB2017 SAPUB2016 old
# 5 mil missing with census 2017 libby 2022
test <- CensusWHR[is.na(CensusWHR$Region),]
nrow(test)
nrow(Census2022)
nrow(CensusWHR)
unique(test$sa_pub2022)
Eircodes <- Eircodes[!duplicated(Eircodes$building_idpik)]
CensusWHREircodes <- merge(CensusWHR, Eircodes, by.x = "building_id_pik",by.y = "building_idpik", all.x=T)
Eircodes <- Eircodes[!duplicated(Eircodes$building_idpik),]
CensusWHREircodes <- merge(CensusWHR, Eircodes, by.x = "building_id_pik",by.y = "building_idpik", all.x=T)
sum(is.na(CensusWHREircodes$eircode_routingkey))
CensusWHREircodes$eircode_routingkey[is.na(CensusWHREircodes$eircode_routingkey)] <- "No Routing Key available"
CensusWHREircodes$Region[is.na(CensusWHREircodes$Region)] <- "No Health Region available"
CensusWHREircodes$eircode_routingkey[is.na(CensusWHREircodes$eircode_routingkey)] <- "No Routing Key available"
CensusEirSummary <- CensusWEircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWEircodes%>%group_by(Region)%>%dplyr::summarise(TotalHouseholdsInRegion = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "Region", all.x=T)
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(Region)%>%dplyr::summarise(TotalHouseholdsInRegion = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "Region", all.x=T)
View(CensusEirSummaryWTots)
CensusEirSummaryWTots$PercentageOfHouseholdsInRegion <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRegion,1)
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(eircode_routingkey)%>%dplyr::summarise(TotalHouseholdsInRegion = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "eircode_routingkey", all.x=T)
CensusEirSummaryWTots$PercentageOfHouseholdsInRegion <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRegion,1)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots,names_from = "Region", values_from = "Households")
library(tidyverse)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots,names_from = "Region", values_from = "Households")
View(SummaryHouseholdsWider)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots%>%select(-PercentageOfHouseholdsInRegion),names_from = "Region", values_from = "Households", values_fill = 0)
SummaryPercentageWider <- pivot_wider(CensusEirSummaryWTots%>%select(-Households),names_from = "Region", values_from = "PercentageOfHouseholdsInRegion", values_fill = 0)
View(SummaryPercentageWider)
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(eircode_routingkey)%>%dplyr::summarise(TotalHouseholdsInRoutingArea = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "eircode_routingkey", all.x=T)
CensusEirSummaryWTots$PercentageOfHouseholdsInRegion <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRegion,1)
CensusEirSummaryWTots$PercentageOfHouseholdsInRegion <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRoutingArea,1)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots%>%select(-PercentageOfHouseholdsInRegion),names_from = "Region", values_from = "Households", values_fill = 0)
SummaryPercentageWider <- pivot_wider(CensusEirSummaryWTots%>%select(-c(Households,TotalHousehodsInRoutingArea)),names_from = "Region", values_from = "PercentageOfHouseholdsInRegion", values_fill = 0)
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(eircode_routingkey)%>%dplyr::summarise(TotalHouseholdsInRoutingArea = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "eircode_routingkey", all.x=T)
CensusEirSummaryWTots$PercentageOfHouseholdsInRoutingArea <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRoutingArea,1)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots%>%select(-PercentageOfHouseholdsInRoutingArea),names_from = "Region", values_from = "Households", values_fill = 0)
SummaryPercentageWider <- pivot_wider(CensusEirSummaryWTots%>%select(-c(Households,TotalHousehodsInRoutingArea)),names_from = "Region", values_from = "PercentageOfHouseholdsInRoutingArea", values_fill = 0)
SummaryPercentageWider <- pivot_wider(CensusEirSummaryWTots%>%select(-c(Households,TotalHouseholdsInRoutingArea)),names_from = "Region", values_from = "PercentageOfHouseholdsInRoutingArea", values_fill = 0)
SummaryPercentageWider$AllHealthRegions <- 100.0
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(eircode_routingkey)%>%dplyr::summarise(AllHealthRegions = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "eircode_routingkey", all.x=T)
CensusEirSummaryWTots$PercentageOfHouseholdsInRoutingArea <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$TotalHouseholdsInRoutingArea,1)
CensusEirSummary <- CensusWHREircodes%>%group_by(eircode_routingkey,Region)%>%dplyr::summarise(Households = n_distinct(hrn_2022_pik))
CensusEirSummaryTots <- CensusWHREircodes%>%group_by(eircode_routingkey)%>%dplyr::summarise(AllHealthRegions = n_distinct(hrn_2022_pik))
CensusEirSummaryWTots <- merge(CensusEirSummary, CensusEirSummaryTots, by = "eircode_routingkey", all.x=T)
CensusEirSummaryWTots$PercentageOfHouseholdsInRoutingArea <- round(CensusEirSummaryWTots$Households*100/CensusEirSummaryWTots$AllHealthRegions,1)
SummaryHouseholdsWider <- pivot_wider(CensusEirSummaryWTots%>%select(-PercentageOfHouseholdsInRoutingArea),names_from = "Region", values_from = "Households", values_fill = 0)
SummaryPercentageWider <- pivot_wider(CensusEirSummaryWTots%>%select(-c(Households,AllHealthRegions)),names_from = "Region", values_from = "PercentageOfHouseholdsInRoutingArea", values_fill = 0)
SummaryPercentageWider$AllHealthRegions <- 100.0
SummaryPercentageWider$MaxPerc <- apply(SummaryPercentageWider[,2:8],1,max)
write.csv(SummaryHouseholdsWider, file = paste0(Outputs,"/SummaryHouseholdsWider.csv"))
write.csv(SummaryPercentageWider, file = paste0(Outputs,"/SummaryHouseholdsWider.csv"))
write.csv(SummaryHouseholdsWider, file = paste0(Outputs,"/SummaryHouseholdsWider.csv"))
write.csv(SummaryPercentageWider, file = paste0(Outputs,"/SummaryPercentageWider.csv"))
CensusEirSummaryAllRoutingAreas <- CensusWHREircodes%>%group_by(Region)%>%dplyr::summarise(AllHealthRegions = n_distinct(hrn_2022_pik))
CensusEirSummaryAllRoutingAreas$eircode_routingkey <- "All routing Keys"
View(CensusEirSummaryAllRoutingAreas)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(lubridate)
library(stringi)
library(haven)
library(data.table)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
#AnalysisType <- "Sample"
AnalysisType <- "Full"
ATCAnal <- "atc1"
#ATCAnal <- "atc2"
ATCAnals <- c("atc1","atc2")
Year <- "2021"
Years <- c("2019","2020","2021","2022")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
RootWD <- getwd()
setwd(RootWD)
Inputs <- file.path(RootWD, "inputs")
Outputs <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
HRLookup <- read.csv(paste0(Inputs,"/LHOHRLookup.csv"))
PCRSFolder <- "//admindatacentre/ADC/Data/Analysis/HSE/PCRS"
CensusAnalysisFolder <- "//admindatacentre/ADC/Data/Analysis/CensusAnalysis"
ZToV <- read.csv(paste0(Inputs,"/ZToVCodes.csv"))
ATCFirstLevel <- read.csv(paste0(Inputs,"/ATCCodeLookup_FirstLevel.csv"))
ATCSecondLevel <- read.csv(paste0(Inputs,"/ATCCodeLookup_SecondLevel.csv"))
ATCThirdLevel <- read.csv(paste0(Inputs,"/ATCCodeLookup_ThirdLevel.csv"))
DrugInfo <- read_sas(paste0(PCRSFolder,"/",2022,"/gms_drug_information_",2022,".sas7bdat"))
for (Year in Years){
#set up working directory, input and output folders.
Patient <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_patient_file_",Year,".sas7bdat"))
Pharma1 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"01.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma2 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"02.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma3 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"03.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma4 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"04.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma5 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"05.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma6 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"06.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma7 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"07.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma8 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"08.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma9 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"09.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma10 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"10.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma11 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"11.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
Pharma12 <- read_sas(paste0(PCRSFolder,"/",Year,"/gms_pharm_costs_",Year,"12.sas7bdat"))%>%select(-c(claim_num,item_num, prescription_charge))
#
PharmaAll<-rbind(Pharma1,Pharma2,Pharma3,Pharma4,Pharma5,Pharma6,Pharma7,Pharma8,Pharma9,Pharma10,Pharma11,Pharma12)
#
rm(Pharma1,Pharma2,Pharma3,Pharma4,Pharma5,Pharma6,Pharma7,Pharma8,Pharma9,Pharma10,Pharma11,Pharma12)
saveRDS(PharmaAll, file=paste0(Outputs,"/PharmaAll_",Year,".Rds"))
PharmaAll <- readRDS(paste0(Outputs,"/PharmaAll_",Year,".Rds"))
#
if ("patient_letter" %in% colnames(PharmaAll)){
PharmaAll<- PharmaAll%>%dplyr::rename("Patient_Letter" = "patient_letter")
}
#
PharmaAll$UID <- paste0(PharmaAll$Patient_Letter,PharmaAll$Card_ID)
PharmaAll$CSOPPSN[grepl("XX",PharmaAll$CSOPPSN)] <- PharmaAll$UID[grepl("XX",PharmaAll$CSOPPSN)]
PharmaAllLessCancelled <- PharmaAll%>%filter(total_cost >=0)
rm(PharmaAll)
if ("patient_letter" %in% colnames(Patient)){
Patient<- Patient%>%dplyr::rename("Patient_Letter" = "patient_letter")
}
#
if ("medical_card_type" %in% colnames(Patient)){
Patient <- Patient%>%dplyr::rename("Medical_Card_Type" = "medical_card_type")
}
#
#
if ("date_of_birth" %in% colnames(Patient)){
Patient <- Patient%>%dplyr::rename("Date_of_Birth" = "date_of_birth")
}
#
if ("gender" %in% colnames(Patient)){
Patient <- Patient%>%dplyr::rename("Gender" = "gender")
}
#
sum(duplicated(Patient$CSOPPSN))
# Patient$DedupMaxCol <- ifelse(Patient$Medical_Card_Type == "MC",1,0)
# PatientDeduped <- Patient%>%group_by(CSOPPSN)%>%slice(which.max(DedupMaxCol))
# should i filter patient for MC, operhaps this is where missing are coming from?
# Patient <- Patient%>%filter(Medical_Card_Type == "MC")%>%select(CSOPPSN,Date_of_Birth,Gender)
# Patient <- Patient[!duplicated(Patient$CSOPPSN),]
#
Patient$Date_of_Birth <- ymd(Patient$Date_of_Birth)
Patient <- Patient %>%mutate(Age = time_length(interval(start = Date_of_Birth, end = ymd("2022-04-03")), unit = "year"))
Patient$Age <- round(Patient$Age,0)
Patient$Age[Patient$Age <0 ] <- 0
Patient$Sex <- ifelse(Patient$Gender == "M","Male", ifelse(Patient$Gender == "F", "Female","Missing"))
#
#
Patient$UID <- paste0(Patient$Patient_Letter,Patient$Card_ID)
Patient <- Patient[!duplicated(Patient$UID),]
PharmaAllLessCancelled$UID <- paste0(PharmaAllLessCancelled$Patient_Letter, PharmaAllLessCancelled$Card_ID)
PharmaAllLessCancelled <- PharmaAllLessCancelled%>%dplyr::ungroup()
Patient <- Patient%>%dplyr::ungroup()
#
saveRDS(Patient, file = paste0(Outputs, "/Patient_",Year,".Rds"))
PharmaWPatient <- merge(PharmaAllLessCancelled,Patient%>%dplyr::select(UID,Age,Sex), by = "UID", all.x=T)
#
# ######
# #PharmaWPatient <- merge(PharmaAllLessCancelled,PatientDeduped%>%select(CSOPPSN,Age,Sex), by = "CSOPPSN", all.x=T)
#
rm(Patient,PharmaAllLessCancelled)
PharmaWPatient$Age[is.na(PharmaWPatient$Age)] <- "No age available"
PharmaWPatient$Sex[is.na(PharmaWPatient$Sex)] <- "No sex available"
PharmaWPatient$AgeGrouped <- ifelse(PharmaWPatient$Age =="No age available", "No age available",
ifelse(PharmaWPatient$Age < 18, "Under 18",
ifelse(PharmaWPatient$Age >17 &PharmaWPatient$Age <30, "18 - 29",
ifelse(PharmaWPatient$Age >29 &PharmaWPatient$Age <40, "30 - 39",
ifelse(PharmaWPatient$Age >39 &PharmaWPatient$Age <50, "40 - 49",
ifelse(PharmaWPatient$Age >49 &PharmaWPatient$Age <55, "50 - 54",
ifelse(PharmaWPatient$Age >54 &PharmaWPatient$Age <60, "55 - 59",
ifelse(PharmaWPatient$Age >59 &PharmaWPatient$Age <65, "60 - 64",
ifelse(PharmaWPatient$Age >64 &PharmaWPatient$Age <70, "65 - 69",
ifelse(PharmaWPatient$Age >69 &PharmaWPatient$Age <75, "70 - 74",
ifelse(PharmaWPatient$Age >74 &PharmaWPatient$Age <80, "75 - 79",
ifelse(PharmaWPatient$Age >79 &PharmaWPatient$Age <85, "80 - 84",
ifelse(PharmaWPatient$Age >84, "85+", "No age available")))))))))))))
table(PharmaWPatient$AgeGrouped)
PharmaWPatient$AgeGrouped <- factor(PharmaWPatient$AgeGrouped, levels = c( "No age available","Under 18","18 - 29","30 - 39","40 - 49","50 - 54", "55 - 59","60 - 64","65 - 69","70 - 74", "75 - 79", "80 - 84","85+"))
saveRDS(PharmaWPatient, file = paste0(Outputs,"/PharmaWPatient_",Year,".Rds"))
PharmaWPatient <- readRDS(paste0(Outputs,"/PharmaWPatient_",Year,".Rds"))
PharmaW <- merge(PharmaWPatient, DrugInfo[,c("drug_code","drug_name","atc","atc_description")], by= "drug_code", all.x = T)
rm(PharmaWPatient)
#
PharmaW <- PharmaW%>%filter(atc!="")
PharmaW$atc[is.na(PharmaW$atc)] <-"Missing"
PharmaW$atc1 <- substr(PharmaW$atc,1,1)
PharmaW$atc1[is.na(PharmaW$atc1)] <-"Missing"
PharmaW$atc2 <- substr(PharmaW$atc,1,3)
PharmaW$atc2[is.na(PharmaW$atc2)] <-"Missing"
PharmaW$atc3 <- substr(PharmaW$atc,1,4)
PharmaW$atc3[is.na(PharmaW$atc3)] <-"Missing"
PharmaW$atc4 <- substr(PharmaW$atc,1,5)
PharmaW$atc4[is.na(PharmaW$atc4)] <-"Missing"
PharmaW$atc5 <- PharmaW$atc
PharmaW$atc5[is.na(PharmaW$atc5)] <-"Missing"
PharmaW <- PharmaW[PharmaW$atc1!="Z",]
table(PharmaW$AgeGrouped)
table(PharmaW$Sex)
PharmaW <- merge(PharmaW,HRLookup, by.x = "LHO", by.y = "LHONum", all.x=T)
sum(is.na(PharmaW$HR))
table(PharmaW$HR)
PharmaW$HR[is.na(PharmaW$HR)] <- "No Health Region available"
saveRDS(PharmaW,paste0(Outputs,"/PharmaW_",Year,".Rds"))
PharmaW <- readRDS(paste0(Outputs,"/PharmaW_",Year,".Rds"))
PharmaW <- PharmaW[sample(1:nrow(PharmaW),100000),]
saveRDS(PharmaW, file = paste0(Outputs,"/PharmaWSample_",Year,".Rds"))
rm(PharmaW)
print(paste0(Year," complete"))
}
setwd("Z:/Projects/TK_HealthRegionProfiles/Github2/healthRegionProfiles/2022/chn/rcode")
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
SAList <- as.data.frame(as.character(unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.PxAPIv1/en/88/SM2022T1/SAP2022T1T1ASA?query=%7B%22query%22:%5B%5D,%22response%22:%7B%22format%22:%22px%22,%22pivot%22:null,%22codes%22:false%7D%7D"))$CSO.Small.Areas.2022)))
colnames(SAList)[1] <- "SA"
#Lookup table from ED to AC and replacing of special chars
SAPSHRLookup <- read.csv(paste0(InputFilesLoc,"/SA_RHALookup_FromLibby.csv"), header = T)
SAPSHRLookup$SA <- str_pad(SAPSHRLookup$SA, 9, pad = "0")
#SAList$SA[SAList$SA == "26701100"] <- "026701100"
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "26701100"] <- "026701100"
SAWHR <- merge(SAList,SAPSHRLookup, by.x = "SA",by.y = "SA", all.x = T)
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "026701100"] <- "26701100"
SAWHR$Region[SAWHR$SA == "Ireland"] <- "State"
SAWHR$IHA[SAWHR$SA == "Ireland"] <- "State"
SAWHR$CHN[SAWHR$SA == "Ireland"] <- "State"
SAWHR$Region[SAWHR$SA == "26701100"] <- "HSE Dublin and South East"
SAWHR$IHA[SAWHR$SA == "26701100"] <- "HSE Dublin South and Wicklow"
SAWHR$CHN[SAWHR$SA == "26701100"] <- "Milltown, Churchtown and Dundrum"
SAWHRForJoinWithPX <- SAWHR%>%select(SA,Region,IHA,CHN)
SAWHR$AC <- "State"
EDWGUIDAC <- SAWHR
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$CHN))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$Region))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
EDWGUIDAC$IHALC <- make.names(tolower(EDWGUIDAC$IHA))
EDWGUIDACIHALC <- gsub(".","-",EDWGUIDAC$IHALC, fixed = T)
EDWGUIDAC <- EDWGUIDAC%>%group_by(CHN)%>%
filter(row_number()==1)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select("Region","IHA","CHN","EDLC","ACLC")
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\"https://healthregionprofiles.cso.ie/2022/chn/pdf/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"-",CSVForHTML$ACLC,".pdf","\"", " target=\"_blank\"", " title=\"",CSVForHTML$CHN," summary report\"", ">","PDF","</a>", "  ")
CSVForHTML$Report <- gsub("--","-", CSVForHTML$Report)
CSVForHTMLToExport <- CSVForHTML%>%select("Region","IHA","CHN","Report")%>%dplyr::rename("Health Region" = "Region")
write.csv(CSVForHTMLToExport, file = paste0(OutputFilesLoc, "/CSVForHTML_CHN.csv"), row.names = F)
# #sample dataset if running tests
#Sample <- sample(1:nrow(EDWGUIDAC),1)
#EDWGUIDAC <- EDWGUIDAC[Sample,]
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC)) {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$CHN[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
AC <- EDWGUIDAC$Region[i]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
IHA <- EDWGUIDAC$IHA[i]
IHALC <- as.character(EDWGUIDAC$IHALC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("IHA Health Profile - ", ED)
# link to map for ED
#EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=gsub("--","-",paste0(i,"-",EDLC,"-",ACLC,".tex")))
#Compile the .rnw with Latex
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"-",ACLC,".tex")))
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"-",ACLC,".tex")))
#EDProfile pdf Link for RMD
# EDLinkPDF<- paste0("<font size=\"5\"><a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",i,"-",EDLC,"-ac-",ACLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
# EDLinkPDF <- gsub("--","-", EDLinkPDF)
# #render R Markdown
# rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".html")))
#
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
warnings()
