Census2016Reduced$AGE3[is.na(Census2016Reduced$AGE3)] <- Census2016Reduced$AGE[is.na(Census2016Reduced$AGE3)]
Years <- c("2016","2017","2018","2019","2021","2022")
setwd("Z:/Projects/TK_HealthRegionProfiles/IHAProfiles/EdProfilesCloneFinal/edprofiles/2022/health/rcode")
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
library(kableExtra)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
SAList <- as.data.frame(as.character(unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.PxAPIv1/en/88/SM2022T1/SAP2022T1T1ASA?query=%7B%22query%22:%5B%5D,%22response%22:%7B%22format%22:%22px%22,%22pivot%22:null,%22codes%22:false%7D%7D"))$CSO.Small.Areas.2022)))
colnames(SAList)[1] <- "SA"
#Lookup table from ED to AC and replacing of special chars
SAPSHRLookup <- read.csv(paste0(InputFilesLoc,"/SA_RHALookup_FromLibby.csv"), header = T)
SAPSHRLookup$SA <- str_pad(SAPSHRLookup$SA, 9, pad = "0")
#SAList$SA[SAList$SA == "26701100"] <- "026701100"
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "26701100"] <- "026701100"
SAWHR <- merge(SAList,SAPSHRLookup, by.x = "SA",by.y = "SA", all.x = T)
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "026701100"] <- "26701100"
SAWHR$Region[SAWHR$SA == "Ireland"] <- "State"
SAWHR$IHA[SAWHR$SA == "Ireland"] <- "State"
SAWHR$CHN[SAWHR$SA == "Ireland"] <- "State"
SAWHR$Region[SAWHR$SA == "26701100"] <- "HSE Dublin and South East"
SAWHR$IHA[SAWHR$SA == "26701100"] <- "HSE Dublin South and Wicklow"
SAWHR$CHN[SAWHR$SA == "26701100"] <- "Milltown, Churchtown and Dundrum"
SAWHRForJoinWithPX <- SAWHR%>%select(SA,Region,IHA)
SAWHR$AC <- "State"
EDWGUIDAC <- SAWHR
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$IHA))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$Region))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select("Region","IHA","EDLC","ACLC")
CSVForHTML <- CSVForHTML[!duplicated(CSVForHTML[,c("Region","IHA","EDLC","ACLC")]),]
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\"https:/healthregionprofiles.cso.ie/2022/pdf/iha/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"_",CSVForHTML$ACLC,".pdf","\"", " target=\"_blank\"", " title=\"",CSVForHTML$IHA," pdf report\"", ">","PDF","</a>", "  "  )
CSVForHTML$Report <- gsub("--","-", CSVForHTML$Report)
CSVForHTML$CHN <- "IHA Level Report"
CSVForHTMLToExport <- CSVForHTML%>%select("Region","IHA","CHN","Report")%>%dplyr::rename("Health Region" = "Region")
write.csv(CSVForHTMLToExport, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
#Sample <- sample(1:nrow(EDWGUIDAC),1)
#EDWGUIDAC <- EDWGUIDAC[Sample,]
EDWGUIDAC <- EDWGUIDAC%>%group_by(IHA)%>%
filter(row_number()==1)
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC)) {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$IHA[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
if (ED!="State") {
CHNsInIHA <-  as.data.frame(SAWHR$CHN[SAWHR$IHA == ED])
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA <- CHNsInIHA[!duplicated(CHNsInIHA$CHN),]
CHNsInIHA <- as.data.frame(CHNsInIHA)
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA$CHN <- CHNsInIHA[order(CHNsInIHA$CHN),]
CHNsInIHA<<- CHNsInIHA
AC <- EDWGUIDAC$Region[i]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("IHA Health Profile - ", ED)
# link to map for ED
#EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#Compile the .rnw with Latex
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#EDProfile pdf Link for RMD
# EDLinkPDF<- paste0("<font size=\"5\"><a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",i,"-",EDLC,"-ac-",ACLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
# EDLinkPDF <- gsub("--","-", EDLinkPDF)
# #render R Markdown
# rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".html")))
#
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
}
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
ErrorList
setwd("Z:/Projects/TK_HealthRegionProfiles/IHAProfiles/EdProfilesCloneFinal/edprofiles/2022/health/rcode")
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
library(kableExtra)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
SAList <- as.data.frame(as.character(unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.PxAPIv1/en/88/SM2022T1/SAP2022T1T1ASA?query=%7B%22query%22:%5B%5D,%22response%22:%7B%22format%22:%22px%22,%22pivot%22:null,%22codes%22:false%7D%7D"))$CSO.Small.Areas.2022)))
colnames(SAList)[1] <- "SA"
#Lookup table from ED to AC and replacing of special chars
SAPSHRLookup <- read.csv(paste0(InputFilesLoc,"/SA_RHALookup_FromLibby.csv"), header = T)
SAPSHRLookup$SA <- str_pad(SAPSHRLookup$SA, 9, pad = "0")
#SAList$SA[SAList$SA == "26701100"] <- "026701100"
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "26701100"] <- "026701100"
SAWHR <- merge(SAList,SAPSHRLookup, by.x = "SA",by.y = "SA", all.x = T)
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "026701100"] <- "26701100"
SAWHR$Region[SAWHR$SA == "Ireland"] <- "State"
SAWHR$IHA[SAWHR$SA == "Ireland"] <- "State"
SAWHR$CHN[SAWHR$SA == "Ireland"] <- "State"
SAWHR$Region[SAWHR$SA == "26701100"] <- "HSE Dublin and South East"
SAWHR$IHA[SAWHR$SA == "26701100"] <- "HSE Dublin South and Wicklow"
SAWHR$CHN[SAWHR$SA == "26701100"] <- "Milltown, Churchtown and Dundrum"
SAWHRForJoinWithPX <- SAWHR%>%select(SA,Region,IHA)
SAWHR$AC <- "State"
EDWGUIDAC <- SAWHR
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$IHA))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$Region))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select("Region","IHA","EDLC","ACLC")
CSVForHTML <- CSVForHTML[!duplicated(CSVForHTML[,c("Region","IHA","EDLC","ACLC")]),]
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\"https:/healthregionprofiles.cso.ie/2022/pdf/iha/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"_",CSVForHTML$ACLC,".pdf","\"", " target=\"_blank\"", " title=\"",CSVForHTML$IHA," pdf report\"", ">","PDF","</a>", "  "  )
CSVForHTML$Report <- gsub("--","-", CSVForHTML$Report)
CSVForHTML$CHN <- "IHA Level Report"
CSVForHTMLToExport <- CSVForHTML%>%select("Region","IHA","CHN","Report")%>%dplyr::rename("Health Region" = "Region")
write.csv(CSVForHTMLToExport, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
#Sample <- sample(1:nrow(EDWGUIDAC),1)
#EDWGUIDAC <- EDWGUIDAC[Sample,]
EDWGUIDAC <- EDWGUIDAC%>%group_by(IHA)%>%
filter(row_number()==1)
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC)) {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$IHA[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
if (ED!="State") {
CHNsInIHA <-  as.data.frame(SAWHR$CHN[SAWHR$IHA == ED])
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA <- CHNsInIHA[!duplicated(CHNsInIHA$CHN),]
CHNsInIHA <- as.data.frame(CHNsInIHA)
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA$CHN <- CHNsInIHA[order(CHNsInIHA$CHN),]
CHNsInIHA<<- CHNsInIHA
AC <- EDWGUIDAC$Region[i]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("IHA Health Profile - ", ED)
# link to map for ED
#EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#Compile the .rnw with Latex
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#EDProfile pdf Link for RMD
# EDLinkPDF<- paste0("<font size=\"5\"><a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",i,"-",EDLC,"-ac-",ACLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
# EDLinkPDF <- gsub("--","-", EDLinkPDF)
# #render R Markdown
# rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".html")))
#
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
}
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
ErrorList
setwd("Z:/Projects/TK_HealthRegionProfiles/IHAProfiles/EdProfilesCloneFinal/edprofiles/2022/health/rcode")
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
library(kableExtra)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
SAList <- as.data.frame(as.character(unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.PxAPIv1/en/88/SM2022T1/SAP2022T1T1ASA?query=%7B%22query%22:%5B%5D,%22response%22:%7B%22format%22:%22px%22,%22pivot%22:null,%22codes%22:false%7D%7D"))$CSO.Small.Areas.2022)))
colnames(SAList)[1] <- "SA"
#Lookup table from ED to AC and replacing of special chars
SAPSHRLookup <- read.csv(paste0(InputFilesLoc,"/SA_RHALookup_FromLibby.csv"), header = T)
SAPSHRLookup$SA <- str_pad(SAPSHRLookup$SA, 9, pad = "0")
#SAList$SA[SAList$SA == "26701100"] <- "026701100"
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "26701100"] <- "026701100"
SAWHR <- merge(SAList,SAPSHRLookup, by.x = "SA",by.y = "SA", all.x = T)
#SAPSHRLookup$SA_PUB2022[SAPSHRLookup$SA_PUB2022 == "026701100"] <- "26701100"
SAWHR$Region[SAWHR$SA == "Ireland"] <- "State"
SAWHR$IHA[SAWHR$SA == "Ireland"] <- "State"
SAWHR$CHN[SAWHR$SA == "Ireland"] <- "State"
SAWHR$Region[SAWHR$SA == "26701100"] <- "HSE Dublin and South East"
SAWHR$IHA[SAWHR$SA == "26701100"] <- "HSE Dublin South and Wicklow"
SAWHR$CHN[SAWHR$SA == "26701100"] <- "Milltown, Churchtown and Dundrum"
SAWHRForJoinWithPX <- SAWHR%>%select(SA,Region,IHA)
SAWHR$AC <- "State"
EDWGUIDAC <- SAWHR
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$IHA))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$Region))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select("Region","IHA","EDLC","ACLC")
CSVForHTML <- CSVForHTML[!duplicated(CSVForHTML[,c("Region","IHA","EDLC","ACLC")]),]
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\"https:/healthregionprofiles.cso.ie/2022/pdf/iha/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"_",CSVForHTML$ACLC,".pdf","\"", " target=\"_blank\"", " title=\"",CSVForHTML$IHA," pdf report\"", ">","PDF","</a>", "  "  )
CSVForHTML$Report <- gsub("--","-", CSVForHTML$Report)
CSVForHTML$CHN <- "IHA Level Report"
CSVForHTMLToExport <- CSVForHTML%>%select("Region","IHA","CHN","Report")%>%dplyr::rename("Health Region" = "Region")
write.csv(CSVForHTMLToExport, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
#Sample <- sample(1:nrow(EDWGUIDAC),1)
#EDWGUIDAC <- EDWGUIDAC[Sample,]
EDWGUIDAC <- EDWGUIDAC%>%group_by(IHA)%>%
filter(row_number()==1)
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC)) {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$IHA[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
if (ED!="State") {
CHNsInIHA <-  as.data.frame(SAWHR$CHN[SAWHR$IHA == ED])
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA <- CHNsInIHA[!duplicated(CHNsInIHA$CHN),]
CHNsInIHA <- as.data.frame(CHNsInIHA)
colnames(CHNsInIHA)[1] <- "CHN"
CHNsInIHA$CHN <- CHNsInIHA[order(CHNsInIHA$CHN),]
CHNsInIHA<<- CHNsInIHA
AC <- EDWGUIDAC$Region[i]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("IHA Health Profile - ", ED)
# link to map for ED
#EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#Compile the .rnw with Latex
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"_",ACLC,".tex")))
#EDProfile pdf Link for RMD
# EDLinkPDF<- paste0("<font size=\"5\"><a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",i,"-",EDLC,"-ac-",ACLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
# EDLinkPDF <- gsub("--","-", EDLinkPDF)
# #render R Markdown
# rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".html")))
#
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
}
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
ErrorList
